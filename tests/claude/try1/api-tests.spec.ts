// API Tests generated by Claude 3.5 Sonnet
import { expect, test } from "@playwright/test";
import axios from "axios";

const BASE_URL = "https://thinking-tester-contact-list.herokuapp.com";
let authToken: string;
let userId: string;
let contactId: string;

test.beforeAll(async () => {
  // Register a new user
  const response = await axios.post(`${BASE_URL}/users`, {
    firstName: "Test",
    lastName: "User",
    email: `testuser_${Date.now()}@example.com`,
    password: "TestPassword123!",
  });

  authToken = response.data.token;
  userId = response.data.user._id;
});

test.afterAll(async () => {
  // Delete the user
  await axios.delete(`${BASE_URL}/users/me`, {
    headers: { Authorization: `Bearer ${authToken}` },
  });
});

test.describe("Contact List API Tests", () => {
  test("should add a new contact", async () => {
    const response = await axios.post(
      `${BASE_URL}/contacts`,
      {
        firstName: "John",
        lastName: "Doe",
        birthdate: "1990-01-01",
        email: "john.doe@example.com",
        phone: "1234567890",
        street1: "123 Main St",
        city: "Anytown",
        stateProvince: "CA",
        postalCode: "12345",
        country: "USA",
      },
      {
        headers: { Authorization: `Bearer ${authToken}` },
      }
    );

    expect(response.status).toBe(201);
    expect(response.data.firstName).toBe("John");
    expect(response.data.lastName).toBe("Doe");
    contactId = response.data._id;
  });

  test("should get contact list", async () => {
    const response = await axios.get(`${BASE_URL}/contacts`, {
      headers: { Authorization: `Bearer ${authToken}` },
    });

    expect(response.status).toBe(200);
    expect(Array.isArray(response.data)).toBe(true);
    expect(response.data.length).toBeGreaterThan(0);
  });

  test("should get a specific contact", async () => {
    const response = await axios.get(`${BASE_URL}/contacts/${contactId}`, {
      headers: { Authorization: `Bearer ${authToken}` },
    });

    expect(response.status).toBe(200);
    expect(response.data._id).toBe(contactId);
    expect(response.data.firstName).toBe("John");
    expect(response.data.lastName).toBe("Doe");
  });

  test("should update a contact", async () => {
    const response = await axios.put(
      `${BASE_URL}/contacts/${contactId}`,
      {
        firstName: "Jane",
        lastName: "Smith",
      },
      {
        headers: { Authorization: `Bearer ${authToken}` },
      }
    );

    expect(response.status).toBe(200);
    expect(response.data.firstName).toBe("Jane");
    expect(response.data.lastName).toBe("Smith");
  });

  test("should partially update a contact", async () => {
    const response = await axios.patch(
      `${BASE_URL}/contacts/${contactId}`,
      {
        phone: "9876543210",
      },
      {
        headers: { Authorization: `Bearer ${authToken}` },
      }
    );

    expect(response.status).toBe(200);
    expect(response.data.phone).toBe("9876543210");
  });

  test("should delete a contact", async () => {
    const response = await axios.delete(`${BASE_URL}/contacts/${contactId}`, {
      headers: { Authorization: `Bearer ${authToken}` },
    });

    expect(response.status).toBe(200);
  });
});

test.describe("User API Tests", () => {
  test("should get user profile", async () => {
    const response = await axios.get(`${BASE_URL}/users/me`, {
      headers: { Authorization: `Bearer ${authToken}` },
    });

    expect(response.status).toBe(200);
    expect(response.data._id).toBe(userId);
  });

  test("should update user profile", async () => {
    const response = await axios.patch(
      `${BASE_URL}/users/me`,
      {
        firstName: "Updated",
        lastName: "Name",
      },
      {
        headers: { Authorization: `Bearer ${authToken}` },
      }
    );

    expect(response.status).toBe(200);
    expect(response.data.firstName).toBe("Updated");
    expect(response.data.lastName).toBe("Name");
  });

  test("should log out user", async () => {
    const response = await axios.post(
      `${BASE_URL}/users/logout`,
      {},
      {
        headers: { Authorization: `Bearer ${authToken}` },
      }
    );

    expect(response.status).toBe(200);
  });

  test("should log in user", async () => {
    const response = await axios.post(`${BASE_URL}/users/login`, {
      email: `testuser_${Date.now()}@example.com`,
      password: "TestPassword123!",
    });

    expect(response.status).toBe(200);
    expect(response.data.token).toBeDefined();
    authToken = response.data.token; // Update token for subsequent tests
  });
});
